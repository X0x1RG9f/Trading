#!/usr/bin/python3
# encoding: utf-8

############################################
#                                          #
# /!\ PYTHON 3 ONLY                        #
#                                          #
# ICHIMOKU CLOUDS Ludovic COURGNAUD        #
# 04-2020                                  #
#                                          #
# SENDS EMAILS FOR IMPORTANT EVENTS :      #
#    - Price above cloud                   #
#    - Price under cloud                   #
#    - Kijunsen Cross Tenkansen            #
#    - Kijunsen Cross Price                #
#                                          #
############################################

###################################################### IMPORTS #####################################################################
import requests
import pandas as pd
import os
import string
import sys
import urllib
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import argparse
from datetime import datetime
from datetime import timezone
import numpy as np
import json
import time
import itertools

###################################################### CONFIG ######################################################################
FILE 			= ""
INTERVAL		= ""
DEBUG			= False
RECIPIENTS		= ""
SMTP_SERVER		= ""
SMTP_PORT		= ""
SMTP_AUTH		= ""
OUTPUT			= ""
TMP_FILE		= False

##################################################### FUNCTIONS ####################################################################

#
# Print with debug condition
#
def myprint(str):
	if DEBUG:
		print(str)

#
# Parse args from command line
#
def parse_args():
	global INTERVAL
	global FILE
	global DEBUG
	global RECIPIENTS
	global SMTP_SERVER
	global SMTP_AUTH
	global SMTP_PORT
	global OUTPUT
	global TMP_FILE

	example_text = '''Examples:
 		python3 ichimoku.py -m MSFT -i 15m --txt
 		python3 ichimoku.py -f ./markets.txt --html --debug
 		python3 ichimoku.py -m 'MSFT, CS.PA' -r 'myemail@test.com' -a 'myemail@gmail.com:mypassword' '''

	parser = argparse.ArgumentParser(prog='./ichimoku.py', epilog=example_text,  formatter_class=argparse.RawDescriptionHelpFormatter)

	# Mandatory args
	# None

	# Optional args
	parser.add_argument("-f", "--markets-file", type=str, help="Input file containing markets to follow (one per line).")
	parser.add_argument("-m", "--markets", type=str, help="Input string containing markets to follow (comma separated). Default 'MSFT, NFLX'.", default="MSFT, NFLX")
	parser.add_argument("-i", "--interval",  type=str, help="Interval of stock data to process. Default '1h'.", choices=['30m', '1h', '4h', '1d'], default="1h")
	parser.add_argument("-s", "--smtp-server", type=str, help="SMTP Server from which notification will be sent. Default 'smtp.gmail.com'", default='smtp.gmail.com')
	parser.add_argument("-p", "--smtp-port", type=int, help="SMTP Server port from which notification will be sent. Default '587'.", default=587)
	parser.add_argument("-a", "--smtp-auth", type=str, help="SMTP Server credentials (login:password).")
	parser.add_argument("-r", "--recipients", type=str, help="Email recipient(s) for notification ('a@a.com, b@b.com').")
	parser.add_argument("-d", "--debug", help="Activate debug mode. Default 'False'.",  action='store_true', default=False)
	parser.add_argument("-ht", "--html", help="HTML return mode.",  action='store_true', default=False)
	parser.add_argument("-t", "--txt", help="TXT return mode.",  action='store_true', default=False)

	args = parser.parse_args()

	FILE 		= args.markets_file
	INTERVAL	= args.interval
	DEBUG		= args.debug
	RECIPIENTS	= args.recipients
	SMTP_SERVER	= args.smtp_server
	SMTP_PORT	= args.smtp_port

	if (args.smtp_auth != None) :
		SMTP_AUTH	= args.smtp_auth.split(":")

	if (FILE == None) and (args.markets == "MSFT, NFLX"):
		myprint("WARNING: At least input string or file should be provided as argument. Default markets string will be used.")
		np.savetxt("mymarkets.txt", [x.strip(' ') for x in args.markets.split(",")], fmt="%s")
		FILE = "./mymarkets.txt"
		TMP_FILE = True


	if (args.markets_file != None):
		if not os.path.isfile(args.markets_file):
			myprint("WARNING: File '" + FILE + "' not found. Market string will be used!")
			np.savetxt("mymarkets.txt", [x.strip(' ') for x in args.markets.split(",")], fmt="%s")
			FILE = "./mymarkets.txt"
			TMP_FILE = True
	else:
		np.savetxt("mymarkets.txt", [x.strip(' ') for x in args.markets.split(",")], fmt="%s")
		FILE = "./mymarkets.txt"
		TMP_FILE = True


	if (args.txt == False) and (args.html == False) and (RECIPIENTS == None) and (SMTP_AUTH == None) :
		myprint("WARNING: No output specified, no recipient specified. Defaulting to TXT output")
		OUTPUT = "TXT"
	else:
		if (RECIPIENTS != None) and (SMTP_AUTH != None):
			OUTPUT = "EMAIL"
		else:
			if (args.html == True):
				OUTPUT = "HTML"
			else:
				OUTPUT = "TXT"

	myprint("INFO: OUTPUTING AS " + OUTPUT + "!")
	myprint("")



#
# Retrieve data from Yahoo Finance & return DataFrame
#
def get_quote_data(symbol, ntvl, iteration):
	rng = "2y"

	if (ntvl == "30m"):
		rng = "10d"
	if (ntvl == "1h"):
		rng = "4mo"
	if (ntvl == "4h"):
		ntvl = "1h"
		rng  = "4mo"

	res = requests.get('https://query1.finance.yahoo.com/v8/finance/chart/' + symbol + '?range=' + rng + '&interval=' + ntvl)
	data = res.json()

	myprint('GET QUOTE DATA : https://query1.finance.yahoo.com/v8/finance/chart/' + symbol + '?range=' + rng + '&interval=' + ntvl)

	if (data['chart']['result'] == None):
		myprint("ERROR: Market unknown! Passing...")
		return None

	body = data['chart']['result'][0]
	df = pd.DataFrame(body['indicators']['quote'][0])
	df['timestamp'] = body['timestamp']

	df['KIJUNSEN'] 		= ""
	df['TENKANSEN'] 	= ""
	df['SSA']		= ""
	df['SSB'] 		= ""

	df['CLOUD_COLOR']	= ""
	df['CLOUD_TREND']	= ""

	df['SIGNAL_X_PRC_CLD']	= 1
	df['SIGNAL_X_KIJ_TEN']	= 1
	df['SIGNAL_X_KIJ_PRC']	= 1
	df['SIGNAL_X_CHI_PRC']	= 1
	df['SIGNAL_X_CHI_SSB']	= 1

	df['SIGNAL_SS26']	= 1
	df['SIGNAL_ICHI_SUP']	= 1

	df['SIGNAL_CLOSE']	= 0

	pd.options.mode.chained_assignment = None
#	pd.set_option('display.max_rows', None)

	if (len(df) <= 70):
		myprint("ERROR: Market has too few history for ichimoku! Passing...")
		return None

	for i in range (df.index[-1] - 60, df.index[-1] + 1):
		if np.isnan(df['open'][i]) :
			if (iteration <= 3):
				time.sleep(5)
				myprint("WARNING: Market has too many Null values for processing. Trying again...")
				return get_quote_data(symbol, ntvl, iteration + 1)
			else:
				myprint("WARNING: Market has too many Null values for processing. Maybe errors...")
				if (df['volume'][df.index[-1]] == 0):
					df = df[:-1]
				df.dropna(inplace=True)
				df.reset_index(drop=True, inplace=True)
				return df

	if (df['volume'][df.index[-1]] == 0):
		df = df[:-1]
	df.dropna(inplace=True)
	df.reset_index(drop=True, inplace=True)
	return df



#
# Get the quote data for larger interval (for score processing)
#
def get_quote_data_sup(symbol):
	if (INTERVAL == "30m") :
		return get_quote_data(symbol, "1h", 1)
	if (INTERVAL == "1h") :
		return get_quote_data(symbol, "1d", 1)
	if (INTERVAL == "4h") :
		return get_quote_data(symbol, "1d", 1)
	if (INTERVAL == "1d") :
		return get_quote_data(symbol, "1wk", 1)

	return None


#
# Transform a 1h dataframe into a 4h (Yahoo does not provide 4h's one)
#
def transform_four_hours(df):
	myprint("ENTERING H4 PROCESSING...")

	if not (("us" in FILE) or ("eu" in FILE)):
		myprint("H4 Not supported yet for MP and CRYPTO")
		return None

	df_size = 130

	# Sequences for candle transformation (depends on markets)
	eu_sequence = [4,4,1]
	us_sequence = [3,4]
	#cr_sequence = [4,4,4,4,4,4]
	#mp_sequence = [4,4,4,4,4,4]

	sequence = eu_sequence
	if ("us" in FILE):
		sequence = us_sequence
	if ("cr" in FILE):
		sequence = cr_sequence
	if ("mp" in FILE):
		sequence = mp_sequence

	dt = datetime.today()
	dt = datetime(dt.year, dt.month, dt.day)
	timestamp = dt.replace(tzinfo=timezone.utc).timestamp()

	today_candle = 0
	for i in range (len(df) - 15, len(df)):
		if (df['timestamp'][i] >= timestamp):
			today_candle += 1

	start_sequence	= 0
	start_candle 	= df.index[-1]

	# Process : How many candle do we have a remove at the end for correct H4 ?
	start_sequence = 0
	for i in range (0, len(sequence)):
		if today_candle >= np.sum(sequence[i:len(sequence)]):
			start_sequence = i
			start_candle = start_candle - (today_candle - np.sum(sequence[i:len(sequence)]))
			break

	avg_candle = np.sum(sequence) / len(sequence)

	# Insure we have sufficient values to trasnform H1 data to H4 data (80 rows min for ichimoku)
	if ((len(df) / avg_candle) <= df_size):
		myprint("ERROR: Market has too few history for H4 ichimoku! Passing...")
		return None

	df4 = pd.DataFrame(columns=list(df.columns), index=[x for x in range(0, df_size)])

	df4['KIJUNSEN'] 	= ""
	df4['TENKANSEN'] 	= ""
	df4['SSA']		= ""
	df4['SSB'] 		= ""

	df4['CLOUD_COLOR']	= ""
	df4['CLOUD_TREND']	= ""

	df4['SIGNAL_X_PRC_CLD']	= 1
	df4['SIGNAL_X_KIJ_TEN']	= 1
	df4['SIGNAL_X_KIJ_PRC']	= 1
	df4['SIGNAL_X_CHI_PRC']	= 1
	df4['SIGNAL_X_CHI_SSB']	= 1

	df4['SIGNAL_SS26']	= 1
	df4['SIGNAL_ICHI_SUP']	= 1

	df4['SIGNAL_CLOSE']	= 0

	cpt1 = start_candle
	cpt2 = 1
	while (df_size-cpt2 >= 0):
		for i in range (0, len(sequence)):
			if (i >= start_sequence):
				s = sequence[i]
				if sequence[i] > 1 :
					df4['low'][df_size-cpt2]         =  np.min(df['low'][cpt1-s+1:cpt1+1])
					df4['high'][df_size-cpt2]        =  np.max(df['high'][cpt1-s+1:cpt1+1])
					df4['volume'][df_size-cpt2]      =  np.sum(df['volume'][cpt1-s+1:cpt1+1])
					df4['open'][df_size-cpt2]        =  df['open'][cpt1-s+1]
					df4['close'][df_size-cpt2]       =  df['close'][cpt1]
					df4['timestamp'][df_size-cpt2]   =  df['timestamp'][cpt1-s+1]
				else:
					df4['low'][df_size-cpt2]         =  df['low'][cpt1]
					df4['high'][df_size-cpt2]        =  df['high'][cpt1]
					df4['volume'][df_size-cpt2]      =  df['volume'][cpt1]
					df4['open'][df_size-cpt2]        =  df['open'][cpt1]
					df4['close'][df_size-cpt2]       =  df['close'][cpt1]
					df4['timestamp'][df_size-cpt2]   =  df['timestamp'][cpt1]


				cpt1 -= s
				cpt2 += 1
		start_sequence = 0
	return df4

#
# Sends Email to recipients
#
def send_email(msg):
	myprint("SENDING EMAIL...")

	sender = "Trading Server"

	message = MIMEMultipart("alternative")
	message["Subject"] = "Trading Opportunities (" +  str(datetime.now()) + ") !"
	message["From"] = "Trading Server"
	message["To"] = RECIPIENTS

	message.attach(MIMEText(msg,"html"))

	server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
	server.ehlo()
	server.starttls()
	server.ehlo()
	server.login(SMTP_AUTH[0], SMTP_AUTH[1])
	server.sendmail( sender, RECIPIENTS, message.as_string() )



#
# Process Ichimoku Cloud data from received Yahoo DataFrame 
#
def processIchimoku(df):

	# KIJUN SEN & TENKAN SEN
	for i in range (df.index[-1] - 70, df.index[-1] + 1):
		df['KIJUNSEN'][i]	= (np.max(df['high'][i-25:i+1]) + np.min(df['low'][i-25:i+1]) ) / 2
		df['TENKANSEN'][i]	= (np.max(df['high'][i-8:i+1])  + np.min(df['low'][i-8:i+1])  ) / 2

	# SENKOU SPAN A (SSA) & SENKOU SPAN B (SSB)
	for i in range (df.index[-1] - 70, df.index[-1] + 1 ):
		df['SSA'][i+26] 	= (df['KIJUNSEN'][i] + df['TENKANSEN'][i]) / 2
		df['SSB'][i+26] 	= (np.max(df['high'][i-51:i+1])  + np.min(df['low'][i-51:i+1])  ) / 2

		# Cloud is green or red ?
		if ( df['SSA'][i+26] >= df['SSB'][i+26] ):	df['CLOUD_COLOR'][i+26] = "GREEN"
		if ( df['SSA'][i+26] <  df['SSB'][i+26] ):	df['CLOUD_COLOR'][i+26] = "RED"


	# PROCESS : Price cross cloud,  KJ cross TK, KJ cross price, Chikou cross price, Chikou cross SSB
	for i in range (df.index[-1] - 10, df.index[-1] + 1):

		# Are we in a bullish (buy) or in a bearish trend (sell) ?
		if ( (df['open'][i] <= df['SSA'][i]) and (df['close'][i] <= df['SSA'][i]) and (df['open'][i] <= df['SSB'][i]) and (df['close'][i] <= df['SSB'][i]) ):	df['CLOUD_TREND'][i] = 'SELL'
		if ( (df['open'][i] >= df['SSA'][i]) and (df['close'][i] >= df['SSA'][i]) and (df['open'][i] >= df['SSB'][i]) and (df['close'][i] >= df['SSB'][i]) ):	df['CLOUD_TREND'][i] = 'BUY'

		# Do we have a cloud signal (price going above or under) ?
		if ( (df['CLOUD_TREND'][i] == 'SELL') and (df['CLOUD_TREND'][i-1] != 'SELL') ): 
			if (df['open'][i] > df['close'][i]) :
				df['SIGNAL_X_PRC_CLD'][i] = -6
			else:
				df['SIGNAL_X_PRC_CLD'][i] = -4
		if ( (df['CLOUD_TREND'][i] == 'BUY' ) and (df['CLOUD_TREND'][i-1] != 'BUY' ) ):
			if (df['open'][i] > df['close'][i]) :
				df['SIGNAL_X_PRC_CLD'][i] = 6
			else:
				df['SIGNAL_X_PRC_CLD'][i] = 4

		# Is Kijunsen crossing Tenkansen ? From above or not ? In a bullish trend or not ?
		if ( (df['CLOUD_TREND'][i] != 'BUY' ) and (df['KIJUNSEN'][i-1] <= df['TENKANSEN'][i-1]) and (df['KIJUNSEN'][i] > df['TENKANSEN'][i]) ): df['SIGNAL_X_KIJ_TEN'][i] = -3
		if ( (df['CLOUD_TREND'][i] != 'BUY' ) and (df['KIJUNSEN'][i-1] >= df['TENKANSEN'][i-1]) and (df['KIJUNSEN'][i] < df['TENKANSEN'][i]) ): df['SIGNAL_X_KIJ_TEN'][i] = 2
		if ( (df['CLOUD_TREND'][i] != 'SELL') and (df['KIJUNSEN'][i-1] <= df['TENKANSEN'][i-1]) and (df['KIJUNSEN'][i] > df['TENKANSEN'][i]) ): df['SIGNAL_X_KIJ_TEN'][i] = -2
		if ( (df['CLOUD_TREND'][i] != 'SELL') and (df['KIJUNSEN'][i-1] >= df['TENKANSEN'][i-1]) and (df['KIJUNSEN'][i] < df['TENKANSEN'][i]) ): df['SIGNAL_X_KIJ_TEN'][i] = 3

		if ( (df['CLOUD_TREND'][i] != 'BUY' ) and (df['KIJUNSEN'][i-1] >= df['TENKANSEN'][i-1]) and (df['KIJUNSEN'][i] < df['TENKANSEN'][i]) ): df['SIGNAL_CLOSE'][i] = -1
		if ( (df['CLOUD_TREND'][i] != 'SELL') and (df['KIJUNSEN'][i-1] <= df['TENKANSEN'][i-1]) and (df['KIJUNSEN'][i] > df['TENKANSEN'][i]) ): df['SIGNAL_CLOSE'][i] = 1


		# Is Kijunsen crossing price ? From above or not ? In a bullish trend or not ?
		if ( (df['CLOUD_TREND'][i] != 'SELL') and (df['KIJUNSEN'][i-1] >= df['close'][i-1] and df['KIJUNSEN'][i] <= df['close'][i]) ):	df['SIGNAL_X_KIJ_PRC'][i] = 3
		if ( (df['CLOUD_TREND'][i] != 'SELL') and (df['KIJUNSEN'][i-1] <= df['close'][i-1] and df['KIJUNSEN'][i] >= df['close'][i]) ):	df['SIGNAL_X_KIJ_PRC'][i] = -2

		if ( (df['CLOUD_TREND'][i] != 'BUY' ) and (df['KIJUNSEN'][i-1] >= df['close'][i-1] and df['KIJUNSEN'][i] <= df['close'][i]) ):	df['SIGNAL_X_KIJ_PRC'][i] = 2
		if ( (df['CLOUD_TREND'][i] != 'BUY' ) and (df['KIJUNSEN'][i-1] <= df['close'][i-1] and df['KIJUNSEN'][i] >= df['close'][i]) ):	df['SIGNAL_X_KIJ_PRC'][i] = -3

		if ( (df['CLOUD_TREND'][i] != 'SELL') and (df['KIJUNSEN'][i-1] <= df['close'][i-1] and df['KIJUNSEN'][i] >= df['close'][i]) ):	df['SIGNAL_CLOSE'][i] = 1
		if ( (df['CLOUD_TREND'][i] != 'BUY' ) and (df['KIJUNSEN'][i-1] >= df['close'][i-1] and df['KIJUNSEN'][i] <= df['close'][i]) ):	df['SIGNAL_CLOSE'][i] = -1


		# Is Chikou crossing SSB ?
		if (df['SSB'][i-27] >= df['close'][i-1]) and (df['SSB'][i-26] < df['close'][i]) :
			df['SIGNAL_X_CHI_SSB'][i] = 4
		if (df['SSB'][i-27] <= df['close'][i-1]) and (df['SSB'][i-26] > df['close'][i]) :
			df['SIGNAL_X_CHI_SSB'][i] = -4

		# Is Chikou crossing price ?
		if (df['close'][i-27] >= df['close'][i-1]) and (df['close'][i-26] < df['close'][i]) :
			df['SIGNAL_X_CHI_PRC'][i] = 3
		if (df['close'][i-27] <= df['close'][i-1]) and (df['close'][i-26] > df['close'][i]) :
			df['SIGNAL_X_CHI_PRC'][i] = -3

		# Is Cloud +26 Red/Green ? Is SSA +26 Going down/up ?
		if (df['CLOUD_COLOR'][i+26] == "GREEN"):
			df['SIGNAL_SS26'][i] = 2
			if (df['SSA'][i+25] <= df['SSA'][i+26]) :
				df['SIGNAL_SS26'][i] += 1
				if ( (df['SSA'][i+25] - df['SSB'][i+25]) < (df['SSA'][i+26] - df['SSB'][i+26]) ):
					df['SIGNAL_SS26'][i] += 1

		if (df['CLOUD_COLOR'][i+26] == "RED"):
			df['SIGNAL_SS26'][i] = -2
			if (df['SSA'][i+25] >= df['SSA'][i+26]) :
				df['SIGNAL_SS26'][i] -= 1
				if ( (df['SSA'][i+25] - df['SSB'][i+25]) > (df['SSA'][i+26] - df['SSB'][i+26]) ):
					df['SIGNAL_SS26'][i] -= 1

	return df

#
# Process score for DataFrame (using DataFrame -1 also)
#
def process_score(df, dfsup):
	myprint("PROCESSING SCORE...")

	# Adding a little score for bigger interval (e.g. for H1, checking H4) : looking for cloud trend, chikou trend, etc.
	if (dfsup is not None):
		dfsup = processIchimoku(dfsup)
		if (dfsup['CLOUD_TREND'][dfsup.index[-1]] == "BUY" ):
			df['SIGNAL_ICHI_SUP'] = 2
			if (dfsup['close'][dfsup.index[-1] - 26] < dfsup['close'][dfsup.index[-1]]):
				df['SIGNAL_ICHI_SUP'] += 1
			if (dfsup['SSB'][dfsup.index[-1] - 26] < dfsup['close'][dfsup.index[-1]]):
				df['SIGNAL_ICHI_SUP'] += 1
		if (dfsup['CLOUD_TREND'][dfsup.index[-1]] == "SELL" ):
			df['SIGNAL_ICHI_SUP'] = -2
			if (dfsup['close'][dfsup.index[-1] - 26] > dfsup['close'][dfsup.index[-1]]):
				df['SIGNAL_ICHI_SUP'] -= 1
			if (dfsup['SSB'][dfsup.index[-1] - 26] > dfsup['close'][dfsup.index[-1]]):
				df['SIGNAL_ICHI_SUP'] -= 1

	# Processing scores for each symbol
	nodes = {}
	histo_scores	= [0,0,0]

	# Processing the 3 last scores : we don't want to receive a score if the score -2 was higher (because we already had the alert)
	for index,histo_score in enumerate(histo_scores):
		for i in range (df.index[-1] - 4 + index, len(df) - 2 + index):
			nodes['A'] = df['SIGNAL_X_PRC_CLD'][i]
			nodes['B'] = df['SIGNAL_X_KIJ_TEN'][i]
			nodes['C'] = df['SIGNAL_X_KIJ_PRC'][i]
			nodes['D'] = df['SIGNAL_X_CHI_PRC'][i]
			nodes['E'] = df['SIGNAL_X_CHI_SSB'][i]
			nodes['F'] = df['SIGNAL_SS26'][i]
			nodes['G'] = df['SIGNAL_ICHI_SUP'][i]

			if (df['SIGNAL_X_PRC_CLD'][i] == 1) and (df['SIGNAL_X_KIJ_TEN'][i] == 1) and (df['SIGNAL_X_KIJ_PRC'][i] == 1) and (df['SIGNAL_X_CHI_PRC'][i] == 1) and (df['SIGNAL_X_CHI_SSB'][i] == 1):
				histo_scores[index] += 0
				continue

			totalbuy  = 1
			totalsell = 1
			for node in nodes:
				if (nodes[node] > 0):
					totalbuy  = totalbuy * nodes[node]
				else:
					totalsell = totalsell * (0 - nodes[node])

			if (totalbuy > totalsell):
				histo_scores[index] += totalbuy

			if (totalsell > totalbuy):
				histo_scores[index] -= totalsell

	myprint("FINAL SCORE : " + str(histo_scores[2]) + " points")
	myprint("PREVIOUS SCORES : " + str(histo_scores[0]) + ", " + str(histo_scores[1]) + " points")

	if ( (histo_scores[2] > 0 and (histo_scores[2] <= histo_scores[1] or histo_scores[2] <= histo_scores[0])) or (histo_scores[2] < 0 and (histo_scores[2] >= histo_scores[1] or histo_scores[2] >= histo_scores[0])) ):
		myprint("Score is lower than 2 previous scores, no email will be sent...")
		return 0

	myprint("Score added to scores pool!")
	return histo_scores[2]


#
# Write Email with correct values taken from DataFrame
#
def write_email(scores, closes):
	myprint("BUILDING MESSAGE...")

	if (OUTPUT == "TXT"):
		MSG		= "SIGNALS " + INTERVAL + "\n\n"
		BUY_MSG		= "BUY :\n"
		SELL_MSG 	= "SELL :\n"
		CLSEB_MSG 	= "CLOSE BUY :\n"
		CLSES_MSG 	= "CLOSE SELL :\n"
	else :
		MSG		= "<html><body>SIGNALS " + INTERVAL + "<br/><br/>"
		BUY_MSG		= "<span style='color:green'><b>BUY :</b></span><br/><ul>"
		SELL_MSG 	= "<span style='color:red'><b>SELL :</b></span><br/><ul>"
		CLSEB_MSG 	= "<span style='color:orange'><b>CLOSE BUY :</b></span><br/><ul>"
		CLSES_MSG 	= "<span style='color:orange'><b>CLOSE SELL :</b></span><br/><ul>"

	buy	= False
	sell	= False
	close_b	= False
	close_s	= False

	table = sorted(scores.items(), key=lambda x: x[1], reverse=True)
	for score in table:
		if (score[1] > 0):
			buy = True
			if (OUTPUT == "TXT"):
				BUY_MSG = BUY_MSG + "\t- " + score[0] + " : " + str(int(score[1])) + " points\n"
			else:
				BUY_MSG = BUY_MSG + "<li><span style='color:green'><b>" + score[0] + " : " + str(int(score[1])) + " points</b></span></li>"

	table = sorted(scores.items(), key=lambda x: x[1])
	for score in table:
		if (score[1] < 0):
			sell = True
			if (OUTPUT == "TXT"):
				SELL_MSG = SELL_MSG + "\t- " + score[0] + " : " + str(int(score[1])) + " points\n"
			else:
				SELL_MSG = SELL_MSG + "<li><span style='color:red'><b>" + score[0] + " : " + str(int(score[1])) + " points</b></span></li>"

	closes = sorted(closes.items(), key=lambda x: x[0])
	for cls in closes:
		if (OUTPUT == "TXT"):
			tmpmess = "\t- " + cls[0] + " : " + str(int(cls[1])) + " points\n"
		else:
			tmpmess ="<li><span style='color:orange'><b>" + cls[0] + " : " + str(int(cls[1])) + " points</b></span></li>"

		if (cls[1] == 1):
			close_b = True
			CLSEB_MSG = CLSEB_MSG + tmpmess
		else:
			close_s = True
			CLSES_MSG = CLSES_MSG + tmpmess

	if (OUTPUT != "TXT"):
		if (buy):
			MSG = MSG + BUY_MSG + "</ul><br/>"
		if (sell):
			MSG = MSG + SELL_MSG + "</ul><br/>"
		if (close_b):
			MSG = MSG + CLSEB_MSG + "</ul><br/>"
		if (close_s):
			MSG = MSG + CLSES_MSG + "</ul><br/>"
	else:
		if (buy):
			MSG = MSG + BUY_MSG + "\n"
		if (sell):
			MSG = MSG + SELL_MSG + "\n"
		if (close_b):
			MSG = MSG + CLSEB_MSG + "\n"
		if (close_s):
			MSG = MSG + CLSES_MSG + "\n"

	if (buy or sell or close_b or close_s):
		return MSG
	else:
		return None


#
# Main function
#
def main():
	scores = {}
	closes = {}

	# For each market, retrieve, process and write in email
	with open(FILE) as f:
		for line in f:
			symbol = line.rstrip().replace(".","_").replace("-","_").replace("/","_")
			myprint("SYMBOL: " + symbol)

			df 	= get_quote_data(line.rstrip(), INTERVAL, 1)
			dfsup 	= get_quote_data_sup(line.rstrip())

			if (INTERVAL == "4h"):
				df = transform_four_hours(df)

			if (df is None) :
				continue

			df 	= processIchimoku(df)

			if (dfsup is not None):
				dfsup 	= processIchimoku(dfsup)
			#myprint(df[['open', 'close', 'SSA', 'SSB', 'CLOUD_TREND']])

			score		= process_score(df, dfsup)
			myprint(df)

			if (score > 35 or score < -35):
				scores[symbol]  = process_score(df, dfsup)
			if (df['SIGNAL_CLOSE'][df.index[-1]] != 0):
				closes[symbol]  = df['SIGNAL_CLOSE'][df.index[-1]]

	# Write & send message
	MSG = write_email(scores, closes)
	if (MSG != None):
		if (OUTPUT == "EMAIL"):
			send_email(MSG + "</body></html>")
		else:
			print(MSG)


################################################### START PROGRAM ##################################################################
parse_args()
main()

if (TMP_FILE == True):
	os.remove("mymarkets.txt")
